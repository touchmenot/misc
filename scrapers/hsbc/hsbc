#!/usr/bin/python -tt

# HSBC account balance scraper v2.1.1
# Copyright (c) 2007-9, John Morrissey <jwm@horde.net>
# Copyright (c) 2010, Matthew John Ernisse <mernisse@ub3rgeek.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of Version 2 of the GNU General Public License as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

from getopt import gnu_getopt, GetoptError
import logging
import os
import re
import sys
from urllib2 import HTTPError

from BeautifulSoup import BeautifulSoup
import html5lib
import mechanize

# Your account number and passwords for hsbcdirect.com. This script should
# be owner-readable ONLY due to the cleartext credentials. This script DOES
# NOT check, it is up to YOU.
USERNAME = ''
PASSWORD = ''
PASSWORD_FAKE_KEYBOARD = ''

# The name of the accounts as they appear in the Account Summary page,
# and the corresponding key to write them to the tab file/RRD as.
# Comment out those you don't have.
ACCOUNTS = {
	'ONLINE SAVINGS': 'savings',
	'ONLINE PAYMENT ACCOUNT': 'checking',
	'ONLINE CD 12 MONTHS': 'cd',
}

# This e-mail address will be appended to the User-Agent header, so
# the site can contact you about your scraping if they so desire.
OWNER = ''

# By default, store the RRD file in the same directory as this script.
RRD = '%s/hsbc-balance.rrd' % os.path.dirname(sys.argv[0])
# Keep this many years of data in the RRD.
RRD_KEEP_LENGTH = 3

# Set this to a filename if you want to write a tab file instead of
# creating/updating an RRD.
TAB = ''

PROXY = ''

DEBUG = False


def usage():
	print 'HSBC account balance scraper v2.1.1'
	print 'Usage: %s [-h|--help]' % os.path.basename(sys.argv[0])
	print ''
	print '    -h, --help                    display this help and exit'

try:
	options = gnu_getopt(sys.argv[1:], 'h', ['help'])[0]
except GetoptError, e:
	print os.path.basename(sys.argv[0]) + ': ' + str(e)
	usage()
	sys.exit(1)

for option in options:
	if option[0] == '-h' or option[0] == '--help':
		usage()
		sys.exit(0)

if not USERNAME or not PASSWORD or not PASSWORD_FAKE_KEYBOARD or \
   not OWNER or \
   not (RRD or TAB) or (RRD and not RRD_KEEP_LENGTH):
	sys.exit('Please edit %s and follow the directions in the comments.' %
		sys.argv[0])

host = 'www.us.hsbc.com'

br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(True, 10, True)
br.set_handle_redirect(True)
br.addheaders = [
	('User-agent',
		'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1 %s' % OWNER),
]
if PROXY:
	br.set_proxies({
		'http': PROXY,
		'https': PROXY,
	})

if DEBUG:
	br.set_debug_http(True) 
	br.set_debug_responses(True)
	br.set_debug_redirects(True)
	logger = logging.getLogger('mechanize')
	logger.addHandler(logging.StreamHandler(sys.stdout))
	logger.setLevel(logging.DEBUG)


try:
	br.open('https://%s/1/2/3/personal/online-services/personal-internet-banking/log-on' % host)
except HTTPError, e:
	sys.exit('%d %s' % (e.code, e.msg))
if not br.viewing_html():
	sys.exit('Unable to retrieve HTML for login page, has %s changed?' % host)

br.select_form(predicate=lambda x: x.attrs.get('id') == 'ibLogonForm')
br.form['userid'] = USERNAME

try:
	r = br.submit()
except HTTPError, e:
	sys.exit('%d %s' % (e.code, e.msg))
if not br.viewing_html():
	sys.exit('Unable to retrieve HTML for password verification page, has %s changed?' % host)

br.form = br.global_form()
br.form.action = 'https://%s/1/2/?idv_cmd=idv.Authentication' % host
br.form.method = 'POST'

br['memorableAnswer'] = PASSWORD
for control in br.form.controls:
	if control.name == 'password':
		control.value = PASSWORD_FAKE_KEYBOARD
		break
else:
	sys.exit('Unable to find PASSWORD_FAKE_KEYBOARD field, has %s changed?' % host)

try:
	r = br.submit()
except HTTPError, e:
	sys.exit('%d %s' % (e.code, e.msg))
if not br.viewing_html():
	sys.exit('Unable to retrieve summary page, has %s changed?' % host)

br.form = br.global_form()
# The form action is set by some validation JavaScript, so we have to
# blindly set it ourselves.
br.form.action = 'https://%s/1/2/3/personal/online-services/personal-internet-banking/view-accounts/account-summary?isUrlRedirect=yes&urlRedirectCommand=cmd_AccountSummary' % host
try:
	r = br.submit()
except HTTPError, e:
	sys.exit('%d %s' % (e.code, e.msg))
if not br.viewing_html():
	sys.exit('Unable to retrieve summary page, has %s changed?' % host)

parser = html5lib.HTMLParser(tree=html5lib.treebuilders.getTreeBuilder('beautifulsoup'))
soup = parser.parse(r.get_data())

balances = {}
for account in ACCOUNTS:
	try:
		balance = soup.find(text=account).findParent(name='tr').\
			find(text=re.compile(r'\$([0-9,]+\.[0-9]{2})'))
	except:
		sys.exit('Unable to retrieve balance, has %s changed?' % host)

	balances[ACCOUNTS[account]] = \
		balance.replace('$', '').replace(',', '')

if TAB:
	out = open(TAB, 'w')
	for account, balance in balances.iteritems():
		out.write('%s: %s\n' % (account, balance))
	out.close()
	sys.exit(0)

import rrd
r = rrd.RoundRobinDatabase(RRD)

update_every = 4 * 60 * 60
keep_rows = (RRD_KEEP_LENGTH * 365 * 24 * 60 * 60) / update_every

if not os.path.exists(RRD):
	args = []
	for account in balances:
		args.append(rrd.DataSource(account, type=rrd.GaugeDST,
			heartbeat=update_every, min=0, max=2000000))
	args.append(rrd.RoundRobinArchive(cf=rrd.LastCF, xff=0, steps=1,
		rows=keep_rows))

	r.create(*args, step=7200)

try:
	template = []
	values = []
	for account, balance in balances.iteritems():
		template.append(account)
		values.append(balance)
	r.update(rrd.Val(*values), template=template)
except Exception, e:
	sys.exit('Unable to update RRD %s: %s' % (RRD, str(e)))
