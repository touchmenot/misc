#!/usr/bin/python -tt

# new-kernel-avail v1.1.1 - Determines when a newer kernel is installed
#   (with the same release) than the one running
# Copyright (c) 2012, John Morrissey <jwm@horde.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, 5th Floor, Boston, MA 02110-1301
# USA.

import platform
import struct
import sys

# Is a newer kernel package installed?
if platform.dist()[0] == 'debian':
    import apt
    import apt_pkg

    running_pkg = 'linux-image-%s' % platform.release()

    c = apt.cache.Cache()
    for pkg in c.get_providing_packages('linux-image'):
        if not pkg.is_installed:
            continue
        if pkg.name == running_pkg:
            continue

        if apt_pkg.version_compare(pkg.name, running_pkg) < 0:
            print('A newer kernel package is installed:')
            print('')
            print('Installed: %s' % running_pkg)
            print('Running:   %s' % pkg.name)
            sys.exit(0)
elif platform.dist()[0] == 'redhat':
    import rpm

    ts = rpm.TransactionSet()
    iter = ts.dbMatch('name', 'kernel')

    cur_ver, cur_release = platform.release().split('-', 2)

    for item in iter:
        compare = rpm.labelCompare(('1', item['version'], item['release']),
            ('1', cur_ver, cur_release))
        if compare <= 0:
            continue

        print('A newer kernel package is installed:')
        print('')
        print('Installed: %s-%s' % (cur_ver, cur_release))
        print('Running:   %s-%s' % (item['version'], item['release']))
        sys.exit(0)

# Is a newer kernel image sitting on disk waiting for a reboot?

# Thanks to Jeff Mahoney <jeffm@jeffreymahoney.com> for this bit.
vmlinuz = open('/boot/vmlinuz-%s' % platform.release(), 'rb')
vmlinuz.seek(512)

# Header
# 1 byte = 0xeb
# 1 byte = start_of_setup
# 4 byte magic = "HdrS"
# 2 byte version >= 0x0105
# 2x2 byte realmode_swtch = 0, 0
# 2 byte start_sys_seg - meaningless, = 0x1000
# 2 byte kernel version pointer = kernel_version - 512
# 1 byte type of loader
ret = struct.unpack('2x4s2H2x2xHB7x', vmlinuz.read(24))

version_offset = ret[3] + 512
vmlinuz.seek(version_offset)
version_str = vmlinuz.read(100)
version_str = version_str[:version_str.index('\0')]
vmlinuz.close()

release, version = version_str.split('#')
version = '#%s' % version

if platform.version() != version:
    print('A new release of kernel %s is available:' % platform.release())
    print('')
    print('Installed: %s' % version)
    print('Running:   %s' % platform.version())
    sys.exit(0)

sys.exit(1)
