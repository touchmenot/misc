diff -urN radiusd-cistron-1.6.4.stock/doc/README.mysql radiusd-cistron-1.6.4/doc/README.mysql
--- radiusd-cistron-1.6.4.stock/doc/README.mysql	Wed Dec 31 19:00:00 1969
+++ radiusd-cistron-1.6.4/doc/README.mysql	Thu Apr 12 17:37:13 2001
@@ -0,0 +1,162 @@
+
+05-15-1999
+
+Changes from last patch:
+o CHANGED TABLE FORMAT!!!  Read Part 2 below VERY CAREFULLY!
+o changed to MySQL 3.22.x C API (this means it won't work with 3.21.x)
+o Uses only one connection to sql server rather than connecting for every
+  accounting packet
+o Added support for some USR VSAs (connect speed, port number mainly)
+o added support for LE-Terminate-Detail from livingston VSAs
+o added program 'radsqlbackup' to print out the contents of the sqlbackup.dat
+  file in mysql insert format.
+o Changed format so it can be patched to future cistron versions more easily
+
+Todo:
+o add authentication support through the cache.c module 
+
+----------------------------------------------------------------------------
+
+From Marc Lewis (marc@blarg.net), the original Mysql cistron patch author.
+I liked this paragraph, so I decided to quote it here.  It applies to me as
+well.  This is an UNSUPPORTED patch.  So if you are totally clueless, please
+don't bother me.  It's not my fault, and I don't have time to teach everyone.
+Sorry, but that's how it is....
+
+----------------------------------------------------------------------------
+
+From Marc Lewis (marc@blarg.net), the original Mysql cistron patch author:
+
+MySQL support is a quick hack that I had to implement for long term storage
+on an off-site database server that we use for billing purposes (measured
+service).  I'm only releasing this patch because some people want it (like
+myself).  I *will not* answer MySQL questions, Radius questions, or
+anything else relating to this patch.  This patch works for us, it may or
+may not work for you.  If it works, great.  If it doesn't, its up to you to
+find out why, I don't have the time to debug other people's setup.
+
+To include MySQL support, you first need to have a working MySQL setup, and
+the development libraries.  This patch assumes that you have installed the
+MySQL include files in $INCLUDE_PATH/mysql and the library files in
+$LIB_PATH/mysql.  Then you will need to uncomment the "MYSQL = 1" line in
+the main Makefile.  After that, "make" in the src directory should be all
+there is to it.
+
+----------------------------------------------------------------------------
+
+Now, that having been said, this patch applies to Cistron radiusd version
+1.5.4.3-beta18.  If you don't have that, you'll first need to download it at
+http://miquels.www.cistron.nl/radius/.
+
+Instructions:
+
+1.  Patch the source with the mysql patch 
+         (which presumably you already have since you're reading this)
+
+2.  Create the table for the records.
+
+WARNING!!  If you used a previous version of this patch, please note that
+the old table from that version will NOT work with this patch.  Alterations
+were made in the table to make it less disk hungry.  
+
+If you used a previous version, and you have the table on your sql server, 
+issue the following four commands on your sql server to format the table so 
+it will work with this new patch:
+
+# alter table radacct change RadacctID RadacctID int unsigned DEFAULT '0' NOT NULL auto_increment;
+# alter table radacct change AcctSessionTime AcctSessionTime mediumint unsigned
+# alter table radacct drop AcctAuthentic
+# alter table radacct drop ServiceType 
+
+Or, if this is the first time you've used a (this) MySQL patch, create the
+table using the following:
+
+#
+# Table structure for table 'radacct'
+#
+CREATE TABLE radacct (
+  RadacctID int unsigned DEFAULT '0' NOT NULL auto_increment,
+  AcctSessionId varchar(32),
+  UserName varchar(32) DEFAULT '' NOT NULL,
+  NASIPAddress varchar(15),
+  NASPortId varchar(15),
+  NASPortType varchar(32),
+  AcctStatusType varchar(32),
+  AcctSessionTime mediumint unsigned,
+  ConnectInfo varchar(32),
+  AcctInputOctets int unsigned,
+  AcctOutputOctets int unsigned,
+  CalledStationId varchar(10) DEFAULT '' NOT NULL,
+  CallingStationId varchar(10) DEFAULT '' NOT NULL,
+  AcctTerminateCause varchar(32) DEFAULT '' NOT NULL,
+  FramedProtocol varchar(32),
+  FramedIPAddress varchar(15) DEFAULT '' NOT NULL,
+  AcctDelayTime mediumint unsigned,
+  Tstamp int unsigned DEFAULT '0' NOT NULL,
+  PRIMARY KEY (RadacctID),
+  KEY UserName (UserName),
+  KEY CalledStationId (CalledStationId),
+  KEY CallingStationId (CallingStationId),
+  KEY AcctTerminateCause (AcctTerminateCause),
+  KEY FramedIPAddress (FramedIPAddress),
+  KEY Tstamp (Tstamp)
+);                                       
+
+3.  Edit conf.h with your sql host, database, password, etc.
+
+4.  Type make
+
+5.  Make sure you have MySQL 3.22.x headers/libs installed.  This patch 
+    will NOT work with 3.21.x because the C API changed slightly.
+
+5.  Be happy.  You should be all set.
+
+I have a few other utilities for stat logging, record conversion, etc
+at http://www.apex.net/~jeff/radius/cistron-mysql if you wanna check them out.  
+They too are unsupported, but they work nicely for us.  YMMV.
+
+----------------------------------------------------------------------
+
+CHANGES
+
+Marc Lewis's Mysql patch was a very good framework to use for a Mysql
+logging patch, and that's what this patch is based on.  Thanks to Marc
+for making it available.
+
+This patch has the following changes (improvements?) over his original:
+
+o  Reduced potentiality for buffer overflows
+
+   (Note, this is only for the patch code itself.  The cistron source
+        was not fully auditted, and in fact, there are still several buffer
+        overflow possibilities in it.  I fixed obvious ones that I found tho)
+
+o  Stores records in a backup file if your database server is down.
+
+        If your server croaks, the code will store the sql records in a
+        (binary) file that you specify in MYSQLBACKUP.  When your sql server
+        comes back online, the code will automatically detect that, and it 
+        will begin placing those backed up records into the database.  This
+        way you don't lose accounting records if you have to take the sql
+        server down for maintenance.
+
+o  Supports sql logging of more accounting record types
+
+        The most notable additions are:  
+                Acct-Calling-Station-Id
+                Acct-Called-Station-Id
+                Acct-Terminate-Cause
+                Radius server assigned timestamps
+                 (rather than SQL server assigned)              
+
+o  Dereferences dictionary values previously left as their integer values
+
+That's it.  Good luck...
+
+If you want to get my statistics generator (called pmrats-sql), you can
+get it from http://www.apex.net/~jeff/radius/cistron-mysql/ .  
+
+
+ --Jeff Carneal, jeff@apex.net
+
+
diff -urN radiusd-cistron-1.6.4.stock/src/Make.inc radiusd-cistron-1.6.4/src/Make.inc
--- radiusd-cistron-1.6.4.stock/src/Make.inc	Mon Aug 21 08:13:27 2000
+++ radiusd-cistron-1.6.4/src/Make.inc	Thu Apr 12 17:37:13 2001
@@ -8,34 +8,34 @@
 
 SERVER_OBJS    = radiusd.o dict.o files.o util.o md5.o attrprint.o \
 			acct.o radius.o pam.o log.o version.o proxy.o \
-			exec.o auth.o timestr.o cache.o
+			exec.o auth.o timestr.o cache.o mysql.o
 SERVERDBM_OBJS = radiusddbm.o dict.o filesdbm.o util.o md5.o attrprint.o \
 			acct.o radius.o pam.o log.o versiondbm.o proxy.o \
-			exec.o auth.o timestr.o cache.o
+			exec.o auth.o timestr.o cache.o mysql.o
 SERVER_SRCS    = radiusd.c dict.c files.c util.c md5.c attrprint.c acct.c \
 			radius.c pam.c log.c version.c proxy.c \
-			exec.c auth.c timestr.c cache.c
+			exec.c auth.c timestr.c cache.c mysql.c
 INCLUDES       = radius.h conf.h
 
-all:	radiusd radwho radzap raduse radtest
+all:	radiusd radwho radzap raduse radtest radsqlbackup
 
 dbm:	radiusd.dbm builddbm
 
 radiusd: $(SERVER_OBJS)
-	$(CC) $(LDFLAGS) -o radiusd $(SERVER_OBJS) $(LIBS) $(LCRYPT) $(PAMLIB)
+	$(CC) $(LDFLAGS) $(MYSQL) -o radiusd $(SERVER_OBJS) $(LIBS) $(LCRYPT) $(PAMLIB) $(MYSQLLIB)
 
 radiusd.dbm: $(SERVERDBM_OBJS)
 	$(CC) $(LDFLAGS) -o radiusd.dbm $(SERVERDBM_OBJS) $(LIBS) $(LCRYPT) \
 			 $(DBMLIB) $(PAMLIB)
 
 radiusd.o: radiusd.c $(INCLUDES)
-	$(CC) $(CFLAGS) -c radiusd.c
+	$(CC) $(CFLAGS) $(MYSQL) -c radiusd.c
 
 radiusddbm.o: radiusd.c $(INCLUDES)
 	$(CC) $(CFLAGS) $(DBM) -c radiusd.c -o radiusddbm.o
 
 acct.o: acct.c $(INCLUDES)
-	$(CC) $(CFLAGS) -c acct.c
+	$(CC) $(CFLAGS) $(MYSQL) -c acct.c
 
 attrprint.o: attrprint.c $(INCLUDES)
 	$(CC) $(CFLAGS) -c attrprint.c
@@ -61,6 +61,9 @@
 cache.o:  cache.c $(INCLUDES)
 	$(CC) $(CFLAGS) -c cache.c 
 
+mysql.o:  mysql.c $(INCLUDES)
+	$(CC) $(MYSQL) $(CFLAGS) -c mysql.c
+
 proxy.o:  proxy.c $(INCLUDES)
 	$(CC) $(CFLAGS) -c proxy.c
 
@@ -100,6 +103,9 @@
 
 radzap: radzap.o util.o
 	$(CC) $(LDFLAGS) -o radzap radzap.o util.o $(LIBS)
+
+radsqlbackup:
+	$(CC) $(MYSQL) $(LDFLAGS) -o radsqlbackup radsqlbackup.c $(LIBS) $(MYSQLLIB)
 
 lint:
 	-lint -hbacvx -DLINT $(SERVER_SRCS)
diff -urN radiusd-cistron-1.6.4.stock/src/Makefile radiusd-cistron-1.6.4/src/Makefile
--- radiusd-cistron-1.6.4.stock/src/Makefile	Sat Sep 18 18:10:41 1999
+++ radiusd-cistron-1.6.4/src/Makefile	Thu Apr 12 17:37:13 2001
@@ -21,6 +21,9 @@
 DBM	= -DNDBM
 DBMLIB	= -ldb
 
+MYSQL = -DUSEMYSQL
+MYSQLLIB = -lmysqlclient 
+
 # Uncomment these if you want PAM support
 #PAM	= -DPAM
 #PAMLIB	= -lpam -ldl
diff -urN radiusd-cistron-1.6.4.stock/src/Makefile.BSD radiusd-cistron-1.6.4/src/Makefile.BSD
--- radiusd-cistron-1.6.4.stock/src/Makefile.BSD	Sat Sep 18 18:10:41 1999
+++ radiusd-cistron-1.6.4/src/Makefile.BSD	Thu Apr 12 17:37:13 2001
@@ -15,6 +15,9 @@
 #PAM	= -DPAM
 #PAMLIB	= -lpam
 
+MYSQL = -DUSEMYSQL
+MYSQLLIB = -lmysqlclient 
+
 BINDIR  = /usr/local/bin
 SBINDIR = /usr/local/sbin
 
diff -urN radiusd-cistron-1.6.4.stock/src/Makefile.lnx radiusd-cistron-1.6.4/src/Makefile.lnx
--- radiusd-cistron-1.6.4.stock/src/Makefile.lnx	Sat Sep 18 18:10:41 1999
+++ radiusd-cistron-1.6.4/src/Makefile.lnx	Thu Apr 12 17:37:13 2001
@@ -25,6 +25,9 @@
 #PAM	= -DPAM
 #PAMLIB	= -lpam -ldl
 
+MYSQL = -DUSEMYSQL
+MYSQLLIB = -lmysqlclient 
+
 BINDIR  = /usr/local/bin
 SBINDIR = /usr/local/sbin
 
diff -urN radiusd-cistron-1.6.4.stock/src/Makefile.osf radiusd-cistron-1.6.4/src/Makefile.osf
--- radiusd-cistron-1.6.4.stock/src/Makefile.osf	Thu Aug 31 10:50:13 2000
+++ radiusd-cistron-1.6.4/src/Makefile.osf	Thu Apr 12 17:37:13 2001
@@ -25,6 +25,9 @@
 #PAM	= -DPAM
 #PAMLIB	= -lpam
 
+MYSQL = -DUSEMYSQL
+MYSQLLIB = -lmysqlclient 
+
 BINDIR  = /usr/local/bin
 SBINDIR = /usr/local/sbin
 
diff -urN radiusd-cistron-1.6.4.stock/src/Makefile.sunos5 radiusd-cistron-1.6.4/src/Makefile.sunos5
--- radiusd-cistron-1.6.4.stock/src/Makefile.sunos5	Sat Sep 18 18:10:41 1999
+++ radiusd-cistron-1.6.4/src/Makefile.sunos5	Thu Apr 12 17:37:13 2001
@@ -14,6 +14,9 @@
 #PAM	= -DPAM
 #PAMLIB	= -lpam
 
+MYSQL = -DUSEMYSQL
+MYSQLLIB = -lmysqlclient -lm
+
 BINDIR  = /usr/local/bin
 SBINDIR = /usr/local/sbin
 
diff -urN radiusd-cistron-1.6.4.stock/src/acct.c radiusd-cistron-1.6.4/src/acct.c
--- radiusd-cistron-1.6.4.stock/src/acct.c	Fri Aug 18 16:40:30 2000
+++ radiusd-cistron-1.6.4/src/acct.c	Thu Apr 12 17:38:01 2001
@@ -25,7 +25,13 @@
 #include	<errno.h>
 #include	<sys/wait.h>
 
-#include	"radiusd.h"
+#ifdef USEMYSQL
+#include <mysql/mysql.h>
+#include "radiusd.h"
+#include "mysql.h"
+#else
+#include "radiusd.h"
+#endif     
 #include	"radutmp.h"
 
 static char trans[64] =
@@ -734,6 +740,10 @@
 		 *	we run it first, the stripped info will also
 		 *	get into the "details" file.
 		 */
+#ifdef USEMYSQL
+		if (rad_accounting_sql(authreq) == 0)
+			reply = 1;
+#endif
 		if (rad_accounting_new(authreq, use_wtmp) == 0)
 			reply = 1;
 		if (rad_accounting_orig(authreq, auth, NULL) == 0)
@@ -743,6 +753,10 @@
 		 *	First log into the details file, before the
 		 *	username gets stripped by rad_accounting_new.
 		 */
+#ifdef USEMYSQL
+		if (rad_accounting_sql(authreq) == 0)
+			reply = 1;
+#endif  
 		if (rad_accounting_orig(authreq, auth, NULL) == 0)
 			reply = 1;
 		if (rad_accounting_new(authreq, use_wtmp) == 0)
diff -urN radiusd-cistron-1.6.4.stock/src/conf.h radiusd-cistron-1.6.4/src/conf.h
--- radiusd-cistron-1.6.4.stock/src/conf.h	Thu Mar 30 10:24:59 2000
+++ radiusd-cistron-1.6.4/src/conf.h	Thu Apr 12 17:37:13 2001
@@ -71,3 +71,12 @@
  */
 #define COMPAT_1543
 
+#ifdef USEMYSQL
+#define MYSQLHOST "your.sql.host.com"
+#define  MYSQLUSER   "username"
+#define  MYSQLPASS   "password"
+#define  MYSQLPORT   3306
+#define  MYSQLDBASE  "your_db_name"
+#define  MYSQLTABLE  "your_table_name"
+#define  MYSQLBACKUP "/var/log/radacct/sqlbackup2.dat"  
+#endif
diff -urN radiusd-cistron-1.6.4.stock/src/mysql.c radiusd-cistron-1.6.4/src/mysql.c
--- radiusd-cistron-1.6.4.stock/src/mysql.c	Wed Dec 31 19:00:00 1969
+++ radiusd-cistron-1.6.4/src/mysql.c	Thu Apr 12 17:37:13 2001
@@ -0,0 +1,324 @@
+#ifdef USEMYSQL
+/*
+ * mysql.c:  Offers accounting (not authentication [yet]) to MySQL
+ *           database server
+ *
+ * (c) 1999 Author - Jeff Carneal, Apex Internet Services, Inc.
+ *
+ * Version: mysql.c  1.01  05-15-1999  jeff@apex.net
+ *
+ */                                      
+#include	<sys/types.h>
+#include	<sys/stat.h>
+#include	<sys/socket.h>
+#include	<sys/time.h>
+#include	<netinet/in.h>
+#include	<stdio.h>
+#include	<stdlib.h>
+#include	<netdb.h>
+#include	<pwd.h>
+#include	<time.h>
+#include	<ctype.h>
+#include	<strings.h>
+#include <unistd.h>
+#include <mysql/mysql.h>
+#include	"radiusd.h"
+#include "mysql.h"
+
+MYSQL *mysql_acct_fd, mysql_sock;
+
+/* Connect to the databse.  Returns descriptor for db connection */
+MYSQL	*connect_to_db(void) {
+
+	/* Connect to the database server */
+	mysql_init(&mysql_sock);
+	if (!(mysql_acct_fd = mysql_real_connect(&mysql_sock, MYSQLHOST, MYSQLUSER, MYSQLPASS, MYSQLDBASE, 0, 0, 0))) {
+		log(L_ERR, "SQL: Couldn't connect to MySQL server on %s as %s", MYSQLHOST, MYSQLUSER);
+		DEBUG2("SQL: Couldn't connect to MySQL server on %s as %s", MYSQLHOST, MYSQLUSER);
+		return 0;
+	}
+	return mysql_acct_fd;
+}
+
+/* Emulate rad_accounting_orig(), but use SQL instead */
+int rad_accounting_sql(AUTH_REQ *authreq) {
+	FILE		*mysqlfile;
+	int		lentmp;
+	char		querystr[2048];
+	char		sqlTable[SQLTABLESIZE];
+	char		*valbuf;
+	VALUE_PAIR *pair;
+	struct stat backup;
+	struct mysqlrec sqlrecord = {"", "", "", "", "", "", 0, "", 0, 0, "", "", "", "", "", 0, 0};
+
+	/* Get timestamp */
+	time((unsigned long*)&sqlrecord.Tstamp);
+
+	pair = authreq->request;
+	while(pair != (VALUE_PAIR *)NULL) {
+		switch(pair->attribute) {
+			/*
+			 * Check the pairs to see if they are anything we are interested in.
+			 */
+			case PW_ACCT_SESSION_ID:
+			strncpy(sqlrecord.AcctSessionId, pair->strvalue, SQLBIGREC);
+			break;
+
+			case PW_USER_NAME:
+			strncpy(sqlrecord.UserName, pair->strvalue, SQLBIGREC);
+			break;
+
+			case PW_NAS_IP_ADDRESS:
+			ipaddr2str(sqlrecord.NASIPAddress, pair->lvalue);
+			break;
+
+			case PW_NAS_PORT_ID:
+			/*sqlrecord.NASPortId = pair->lvalue;*/
+			snprintf(sqlrecord.NASPortId, SQLLILREC, "%d", pair->lvalue);
+			break;
+
+			/* USR-Chassis-Call-Slot */
+			case 167961:
+			snprintf(sqlrecord.NASPortId, SQLLILREC, "%d", pair->lvalue);
+			break;
+
+			/* USR-Chassis-Call-Span */
+			case 167962:
+			lentmp = strlen(sqlrecord.NASPortId);
+			snprintf(sqlrecord.NASPortId+lentmp, SQLLILREC-lentmp, ":%d", pair->lvalue);
+			break;
+
+			/* USR-Chassis-Call-Channel*/
+			case 167963:
+			lentmp = strlen(sqlrecord.NASPortId);
+			snprintf(sqlrecord.NASPortId+lentmp, SQLLILREC-lentmp, ":%d", pair->lvalue);
+			break;
+
+			case PW_NAS_PORT_TYPE:
+			valbuf = (char *)dict_valgetname(pair);
+			if(valbuf != (char *)NULL) {
+				strncpy(sqlrecord.NASPortType, valbuf, SQLBIGREC);
+			}
+			break;
+
+			case PW_ACCT_STATUS_TYPE:
+			valbuf = (char *)dict_valgetname(pair); 
+			if(valbuf != (char *)NULL) {
+				strncpy(sqlrecord.AcctStatusType, valbuf, SQLBIGREC);
+			}
+			break;
+
+			case PW_ACCT_SESSION_TIME:
+			sqlrecord.AcctSessionTime = pair->lvalue;
+			break;
+
+			case PW_CONNECT_INFO:
+			strncpy(sqlrecord.ConnectInfo, pair->strvalue, SQLBIGREC);
+			break;
+
+			/* USR VSA for:  USR-Connect-Speed */
+			case 167971:
+			valbuf = (char *)dict_valgetname(pair); 
+			if(valbuf != (char *)NULL) {
+				strncpy(sqlrecord.ConnectInfo, valbuf, SQLBIGREC);
+			}
+			break;
+
+			case PW_ACCT_INPUT_OCTETS:
+			sqlrecord.AcctInputOctets = pair->lvalue;
+			break;
+
+			case PW_ACCT_OUTPUT_OCTETS:
+			sqlrecord.AcctOutputOctets = pair->lvalue;
+			break;
+
+			case PW_CALLED_STATION_ID:
+			strncpy(sqlrecord.CalledStationId, pair->strvalue, SQLLILREC);
+			break;
+
+			case PW_CALLING_STATION_ID:
+			/* USR 00 workaround */
+			lentmp = strlen(pair->strvalue);
+			if(lentmp > 10) {
+				strncpy(sqlrecord.CallingStationId, pair->strvalue+(lentmp-10), SQLLILREC);
+			} else {
+				strncpy(sqlrecord.CallingStationId, pair->strvalue, SQLLILREC);
+			}
+			break;
+
+			case PW_ACCT_TERMINATE_CAUSE:
+			valbuf = (char *)dict_valgetname(pair);
+			if(valbuf != (char *)NULL) {
+				strncpy(sqlrecord.AcctTerminateCause, valbuf, SQLREALBIGREC);
+			}
+			break;
+
+			/* Appears to be LE-Terminate-Detail */
+			case 65538:
+			strncpy(sqlrecord.AcctTerminateCause, pair->strvalue, SQLREALBIGREC);
+			break;     
+
+			case PW_FRAMED_PROTOCOL:
+			valbuf = (char *)dict_valgetname(pair);
+			if(valbuf != (char *)NULL) {
+				strncpy(sqlrecord.FramedProtocol, valbuf, SQLBIGREC);
+			}
+			break;
+
+			case PW_FRAMED_IP_ADDRESS:
+			ipaddr2str(sqlrecord.FramedIPAddress, pair->lvalue);
+			break;
+
+			case PW_ACCT_DELAY_TIME:
+			sqlrecord.AcctDelayTime = pair->lvalue;
+			break;
+
+			default:
+			break;
+		} /* end switch */
+		pair = pair->next;
+	} /* end while */
+
+	if (mysql_acct_fd != NULL) {
+
+		strncpy(sqlTable, MYSQLTABLE, SQLTABLESIZE);
+
+		/*
+		*  Check to see if our backup file has records in it
+		*  If it does, we need to insert those into the database
+		*/
+		if(stat(MYSQLBACKUP, &backup) == 0) {
+			if(backup.st_size > 0) {
+				if((mysqlfile = fopen(MYSQLBACKUP, "rwb")) == (FILE *)NULL) {
+					log(L_ERR, "SQL: Couldn't open file %s", MYSQLBACKUP);
+					exit(1);
+				}
+
+				/*
+				 *  Lock the mysql backup file, prefer lockf() over flock().
+				 */
+				#if defined(F_LOCK) && !defined(BSD)
+				(void)lockf((int)mysqlfile, (int)F_LOCK, (off_t)SQL_LOCK_LEN);
+				#else
+				(void)flock(mysqlfile, LOCK_EX);
+				#endif
+
+				DEBUG2("SQL:  mysql_acct_fd:  %ld", mysql_acct_fd);
+				log(L_INFO, "SQL:  Clearing out sql backup file - %s", MYSQLBACKUP);
+
+				while(!feof(mysqlfile)) {
+					if(fread(&sqlrecord, sizeof(struct mysqlrec), 1, mysqlfile) == 1) {;
+						snprintf(querystr, 2048, "insert into %s values (0, '%s', '%s', '%s', '%s', '%s', '%s', %ld, '%s', %ld, %ld, '%s', '%s', '%s', '%s', '%s', %ld, %ld)",
+							sqlTable,
+							sqlrecord.AcctSessionId,
+							sqlrecord.UserName,
+							sqlrecord.NASIPAddress,
+							sqlrecord.NASPortId,
+							sqlrecord.NASPortType,
+							sqlrecord.AcctStatusType,
+							sqlrecord.AcctSessionTime,
+							sqlrecord.ConnectInfo,
+							sqlrecord.AcctInputOctets,
+							sqlrecord.AcctOutputOctets,
+							sqlrecord.CalledStationId,
+							sqlrecord.CallingStationId,
+							sqlrecord.AcctTerminateCause,
+							sqlrecord.FramedProtocol,
+							sqlrecord.FramedIPAddress,
+							sqlrecord.AcctDelayTime,
+							sqlrecord.Tstamp
+					);
+						if(mysql_query(mysql_acct_fd, (const char *) querystr) < 0) {
+							DEBUG2("SQL: Couldn't insert SQL accounting record - %s", mysql_error(mysql_acct_fd));
+							log(L_ERR, "SQL: Couldn't insert SQL accounting record - %s", mysql_error(mysql_acct_fd));
+						}
+					} /* fread */
+				} /* while */
+				unlink((const char *)MYSQLBACKUP);
+			} /* end if (filesize) */
+		} /* end stat */
+
+		/*
+		*  Otherwise, the backup is empty.  We go here to insert
+		*  current incoming records into the database
+		*/
+
+		snprintf(querystr, 2048, "insert into %s values (0, '%s', '%s', '%s', '%s', '%s', '%s', %ld, '%s', %ld, %ld, '%s', '%s', '%s', '%s', '%s', %ld, %ld)",
+			sqlTable,
+			sqlrecord.AcctSessionId,
+			sqlrecord.UserName,
+			sqlrecord.NASIPAddress,
+			sqlrecord.NASPortId,
+			sqlrecord.NASPortType,
+			sqlrecord.AcctStatusType,
+			sqlrecord.AcctSessionTime,
+			sqlrecord.ConnectInfo,
+			sqlrecord.AcctInputOctets,
+			sqlrecord.AcctOutputOctets,
+			sqlrecord.CalledStationId,
+			sqlrecord.CallingStationId,
+			sqlrecord.AcctTerminateCause,
+			sqlrecord.FramedProtocol,
+			sqlrecord.FramedIPAddress,
+			sqlrecord.AcctDelayTime,
+			sqlrecord.Tstamp
+			);
+
+		/* For Debugging purposes only */
+		/*
+		log(L_DBG, "SQL: Query String Length - %d", strlen(querystr));
+		*/
+
+		if (mysql_query(mysql_acct_fd, (const char *) querystr) < 0) {
+			log(L_ERR, "SQL: Insert failed - %s:  %s",querystr, mysql_error(mysql_acct_fd));
+			save_to_backup(sqlrecord);
+		}
+
+	/* Database is down (ick) */
+	} else {
+
+		save_to_backup(sqlrecord);
+
+	}
+	return 0;
+}
+
+void save_to_backup(struct mysqlrec sqlrec) {
+	FILE		*mysqlfile;
+
+	/*
+	 *  The database is down for some reason
+	 *  So open up the backup file to save records in
+	 */
+	if((mysqlfile = fopen(MYSQLBACKUP, "a")) == (FILE *)NULL) {
+		log(L_ERR, "SQL: Couldn't open file %s", MYSQLBACKUP);
+		DEBUG2("SQL: Couldn't open file %s", MYSQLBACKUP);
+	} else {
+		/*
+		* Lock the mysql backup file, prefer lockf() over flock().
+		*/
+		#if defined(F_LOCK) && !defined(BSD)
+			(void)lockf((int)mysqlfile, (int)F_LOCK, (off_t)SQL_LOCK_LEN);
+		#else
+			(void)flock(mysqlfile, LOCK_EX);
+		#endif
+		if(fwrite(&sqlrec, sizeof(struct mysqlrec), 1, mysqlfile) < 1) {
+			log(L_ERR, "SQL: Couldn't write to file %s", MYSQLBACKUP);
+		}
+		fclose(mysqlfile);
+	}
+}
+
+char * dict_valgetname(VALUE_PAIR *pair) {
+	DICT_VALUE *dval;
+	
+	dval = dict_valget(pair->lvalue, pair->name);
+	if(dval != (DICT_VALUE *)NULL) {
+		return dval->name;
+	} else {
+		return NULL;
+	}
+}
+
+#endif /* USEMYSQL */
+
diff -urN radiusd-cistron-1.6.4.stock/src/mysql.h radiusd-cistron-1.6.4/src/mysql.h
--- radiusd-cistron-1.6.4.stock/src/mysql.h	Wed Dec 31 19:00:00 1969
+++ radiusd-cistron-1.6.4/src/mysql.h	Thu Apr 12 17:37:13 2001
@@ -0,0 +1,46 @@
+/*
+ * mysql.h   Definitions for structures and functions needed in mysql.c
+ *
+ * Version: mysql.c  0.99  04-21-1999  jeff@apex.net
+ */    
+#ifndef _MYSQL_H
+#define _MYSQL_H
+#endif
+
+extern MYSQL *mysql_acct_fd, mysql_sock;
+
+/* Misc definitions */
+#define SQL_LOCK_LEN sizeof(struct mysqlrec)
+#define PW_ACCT_TERMINATE_CAUSE	49
+
+/* Structure definitions */
+#define SQLBIGREC 32
+#define SQLREALBIGREC 255
+#define SQLLILREC      15
+#define SQLTABLESIZE 80
+
+struct mysqlrec {
+	char				AcctSessionId[SQLBIGREC];
+	char				UserName[SQLBIGREC];
+	char				NASIPAddress[SQLLILREC];
+	char				NASPortId[SQLLILREC];
+	char				NASPortType[SQLBIGREC];
+	char				AcctStatusType[SQLBIGREC];
+	unsigned long	AcctSessionTime;
+	char				ConnectInfo[SQLBIGREC];
+	unsigned long	AcctInputOctets;
+	unsigned long	AcctOutputOctets;
+	char				CalledStationId[SQLLILREC];
+	char				CallingStationId[SQLLILREC];
+	char				AcctTerminateCause[SQLREALBIGREC];
+	char				FramedProtocol[SQLBIGREC];
+	char				FramedIPAddress[SQLLILREC];
+	unsigned long	AcctDelayTime;
+	unsigned long	Tstamp;
+};                                  
+
+/* Function Prototypes */
+char *dict_valgetname(VALUE_PAIR *pair);
+MYSQL *connect_to_db(void);
+int rad_accounting_sql(AUTH_REQ *authreq);
+void save_to_backup(struct mysqlrec sqlrec);
diff -urN radiusd-cistron-1.6.4.stock/src/radiusd.c radiusd-cistron-1.6.4/src/radiusd.c
--- radiusd-cistron-1.6.4.stock/src/radiusd.c	Mon Jul  3 04:49:20 2000
+++ radiusd-cistron-1.6.4/src/radiusd.c	Thu Apr 12 17:37:13 2001
@@ -53,6 +53,10 @@
 #endif
 
 #include	"radiusd.h"
+#ifdef USEMYSQL
+#include <mysql/mysql.h>
+#include "mysql.h"
+#endif 
 
 /*
  *	Global variables.
@@ -490,6 +494,16 @@
 					ntohl(sin->sin_addr.s_addr),
 					ntohs(sin->sin_port),
 					recv_buffer, result);
+#ifdef USEMYSQL
+					/* This should reconnect to our database if we lose connection */
+					if(mysql_acct_fd == NULL) {
+						mysql_acct_fd = connect_to_db();
+					} else {
+						if(mysql_ping(mysql_acct_fd) != 0) {
+							mysql_acct_fd = NULL;
+						}
+					}
+#endif           
 				radrespond(authreq, acctfd);
 			}
 			else if (result < 0 && errno == EINTR) {
diff -urN radiusd-cistron-1.6.4.stock/src/radsqlbackup.c radiusd-cistron-1.6.4/src/radsqlbackup.c
--- radiusd-cistron-1.6.4.stock/src/radsqlbackup.c	Wed Dec 31 19:00:00 1969
+++ radiusd-cistron-1.6.4/src/radsqlbackup.c	Thu Apr 12 17:37:13 2001
@@ -0,0 +1,43 @@
+#include <stdio.h>
+#include <mysql/mysql.h>
+#include "radiusd.h"
+#include "mysql.h"
+
+main() {
+	FILE *backup;
+	struct mysqlrec sqlrecord;
+	char querystr[2048];
+
+	if((backup = fopen(MYSQLBACKUP, "rb")) == (FILE *)NULL) {
+		printf("Error opening file:  %s\n", MYSQLBACKUP);
+		exit(1);
+	}
+
+	while(!feof(backup)) {
+		if(fread(&sqlrecord, sizeof(struct mysqlrec), 1, backup) == 1) {;
+			snprintf(querystr, 2048, "insert into %s values (0, '%s', '%s', '%s', '%s', '%s', '%s', %ld, '%s', %ld, %ld, '%s', '%s', '%s', '%s', '%s', %ld, %ld)",
+				MYSQLTABLE,
+				sqlrecord.AcctSessionId,
+				sqlrecord.UserName,
+				sqlrecord.NASIPAddress,
+				sqlrecord.NASPortId,
+				sqlrecord.NASPortType,
+				sqlrecord.AcctStatusType,
+				sqlrecord.AcctSessionTime,
+				sqlrecord.ConnectInfo,
+				sqlrecord.AcctInputOctets,
+				sqlrecord.AcctOutputOctets,
+				sqlrecord.CalledStationId,
+				sqlrecord.CallingStationId,
+				sqlrecord.AcctTerminateCause,
+				sqlrecord.FramedProtocol,
+				sqlrecord.FramedIPAddress,
+				sqlrecord.AcctDelayTime,
+				sqlrecord.Tstamp
+			);                                                                 
+
+			printf("%s\n", querystr);
+		}
+
+	}
+}
