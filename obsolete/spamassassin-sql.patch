If user_scores_dsn is defined and there is a problem fetching SQL prefs
(other than zero rows returned), don't filter the message because important
user prefs, such as required_hits and white/blacklists may be ignored.

This patch has since been incorporated into SpamAssassin 3.

Author: John Morrissey <jwm@horde.net>
This patch can be distributed under the same terms as SpamAssassin itself.

********************************************************************
* This software is distributed in the hope that it will be useful, *
* but WITHOUT ANY WARRANTY; without even the implied warranty of   *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.             *
********************************************************************


diff -urN Mail-SpamAssassin-2.43.stock/lib/Mail/SpamAssassin/ConfSourceSQL.pm Mail-SpamAssassin-2.43/lib/Mail/SpamAssassin/ConfSourceSQL.pm
--- Mail-SpamAssassin-2.43.stock/lib/Mail/SpamAssassin/ConfSourceSQL.pm	Wed Aug 14 15:01:35 2002
+++ Mail-SpamAssassin-2.43/lib/Mail/SpamAssassin/ConfSourceSQL.pm	Sun Nov 17 19:42:13 2002
@@ -50,19 +50,22 @@
    my $dsn = $self->{main}->{conf}->{user_scores_dsn};
    if(!defined($dsn) || $dsn eq '') {
      dbg ("No DSN defined; skipping sql");
-     return;
+     return 1;
    }
 
    eval {
      # make sure we can see croak messages from DBI
-     local $SIG{'__DIE__'} = sub { warn "$_[0]"; };
+     local $SIG{'__DIE__'} = sub { die "$_[0]"; };
      require DBI;
      load_with_dbi($self, $username, $dsn);
    };
 
    if ($@) {
-     warn "failed to load user scores from SQL database, ignored\n";
+     warn "failed to load user scores from SQL database: $@\n";
+     return 0;
    }
+
+   return 1;
 }
 
 sub load_with_dbi {
@@ -95,10 +98,10 @@
             	$main->{conf}->parse_scores_only(join('',$text));
             }
             $sth->finish();
-         } else { warn "SQL Error: $sql\n".$sth->errstr."\n"; }
-      } else { warn "SQL Error: " . $dbh->errstr . "\n"; }
+         } else { die "SQL Error: $sql\n".$sth->errstr."\n"; }
+      } else { die "SQL Error: " . $dbh->errstr . "\n"; }
    $dbh->disconnect();
-   } else { warn "SQL Error: " . DBI->errstr . "\n"; }
+   } else { die "SQL Error: " . DBI->errstr . "\n"; }
 }
 
 sub dbg { Mail::SpamAssassin::dbg (@_); }
diff -urN Mail-SpamAssassin-2.43.stock/lib/Mail/SpamAssassin.pm Mail-SpamAssassin-2.43/lib/Mail/SpamAssassin.pm
--- Mail-SpamAssassin-2.43.stock/lib/Mail/SpamAssassin.pm	Tue Oct 15 15:53:47 2002
+++ Mail-SpamAssassin-2.43/lib/Mail/SpamAssassin.pm	Sun Nov 17 19:12:54 2002
@@ -597,7 +597,11 @@
   my ($self, $username) = @_;
 
   my $src = Mail::SpamAssassin::ConfSourceSQL->new ($self);
-  $src->load($username);
+  if (!$src->load($username)) {
+    return 0;
+  }
+
+  return 1;
 }
 
 
diff -urN Mail-SpamAssassin-2.43.stock/spamd/spamd.raw Mail-SpamAssassin-2.43/spamd/spamd.raw
--- Mail-SpamAssassin-2.43.stock/spamd/spamd.raw	Mon Oct 14 16:44:42 2002
+++ Mail-SpamAssassin-2.43/spamd/spamd.raw	Sun Nov 17 20:24:18 2002
@@ -337,25 +337,35 @@
                     # We'll run handle user unless we've been told not
                     # to process per-user config files.  Otherwise
                     # we'll check and see if we need to try SQL
-                    # lookups.  If $opt{'user-config'} is true, we need to try
-                    # their config file and then do the SQL lookup.
-                    # If $opt{'user-config'} IS NOT true, we skip the conf file and
-                    # only need to do the SQL lookup if $opt{'sql-config'} IS
-                    # true.  (I got that wrong the first time.)
+                    # lookups. If $opt{'user-config'} IS NOT true, we
+                    # skip the conf file and only need to do the SQL
+                    # lookup if $opt{'sql-config'} IS true.  (I got that
+                    # wrong the first time.)
 
                     if (/^User: (.*)\r\n/)
                     {
                         $current_user = $1;
                         if (!$opt{'user-config'})
                         {
-			               if ($opt{'sql-config'}) {
-				              handle_user_sql($current_user);
-			               } elsif ($opt{'virtual-config'}) {
-				              handle_virtual_user($current_user);
-			               }
-                        }
-               			else
-                        {
+                            if ($opt{'sql-config'}) {
+                                if (!handle_user_sql($current_user)) {
+                                    if ($method eq 'REPORT_IFSPAM') {
+                                        print 'SPAMD/1.1 ' . $resphash{'EX_OK'} . " EX_OK\r\n"
+                                              . 'X-Spam-Status: No, hits=0.0 required=0.0 tests='
+                                              . ' version=' . Mail::SpamAssassin::Version()
+                                              . "\r\n\r\n";
+                                    }
+                                    else
+                                    {
+                                        print 'SPAMD/1.1 ' . $resphash{'EX_OK'}  . " EX_OK\r\n"
+                                              . "Spam: False ; 0.0 / 0.0\r\n\r\n";
+                                    }
+                                    exit;
+                                }
+                            } elsif ($opt{'virtual-config'}) {
+                                handle_virtual_user($current_user);
+                            }
+                        } else {
                             handle_user($current_user);
                         }
                     }
@@ -480,26 +490,16 @@
 
                     # We'll run handle user unless we've been told not
                     # to process per-user config files.  Otherwise
-                    # we'll check and see if we need to try SQL
-                    # lookups.  If $opt{'user-config'} is true, we need to try
-                    # their config file and then do the SQL lookup.
-                    # If $opt{'user-config'} IS NOT true, we skip the conf file and
-                    # only need to do the SQL lookup if $opt{'sql-config'} IS
-                    # true.  (I got that wrong the first time.)
+                    # we'll (later) check and see if we need to try SQL
+                    # lookups. If $opt{'user-config'} IS NOT true, we skip
+                    # the conf file and only need to do the SQL lookup if
+                    # $opt{'sql-config'} IS true.  (I got that wrong the
+                    # first time.)
 
                     if (/^User: (.*)\r\n/)
                     {
                         $current_user = $1;
-                        if (!$opt{'user-config'})
-                        {
-			    if ($opt{'sql-config'}) {
-				handle_user_sql($current_user);
-			    } elsif ($opt{'virtual-config'}) {
-				handle_virtual_user($current_user);
-			    }
-                        }
-			else
-                        {
+                        if ($opt{'user-config'}) {
                             handle_user($current_user);
                         }
                     }
@@ -562,6 +562,29 @@
 		if($actual_length != $expected_length) { protocol_error ("(Content-length mismatch: $expected_length vs. $actual_length)"); return 1; }
 	    }
 
+            if (!$opt{'user-config'}) {
+                if ($opt{'sql-config'}) {
+                    if (!handle_user_sql($current_user)) {
+                        my $msg_resp = join '',$mail->header,"\n",@{$mail->body};
+                        my $msg_resp_length = length($msg_resp);
+                        if($version >= 1.2) # Spamc protocol 1.2 means it accepts content-length
+                        {
+                            print "SPAMD/1.1 $resphash{$resp} $resp\r\n",
+                                  "Content-length: $msg_resp_length\r\n\r\n",
+                                  $msg_resp;
+                        }
+                        else # Earlier than 1.2 didn't accept content-length
+                        {
+                            print "SPAMD/1.0 $resphash{$resp} $resp\r\n",
+                                  $msg_resp;
+                        }
+                        exit;
+                    }
+                } elsif ($opt{'virtual-config'}) {
+                    handle_virtual_user($current_user);
+                }
+            }
+
 	    # Now use copy-on-writed (hopefully) SA object
 	    my $status = $spamtest->check($mail);
 	    $status->rewrite_mail; #if $status->is_spam;
@@ -738,7 +761,9 @@
 sub handle_user_sql
 {
     my $username = shift;
-    $spamtest->load_scoreonly_sql ($username);
+    if (!$spamtest->load_scoreonly_sql ($username)) {
+        return 0;
+    }
     return 1;
 }
 
diff -urN Mail-SpamAssassin-2.43.stock/sql/README Mail-SpamAssassin-2.43/sql/README
--- Mail-SpamAssassin-2.43.stock/sql/README	Thu Sep 26 10:50:26 2002
+++ Mail-SpamAssassin-2.43/sql/README	Sun Nov 17 20:27:45 2002
@@ -33,12 +33,16 @@
 Would tell SpamAssassin to connect to the database named spamassassin using
 MySQL on the local server, and since <port> is omitted, the driver will use the
 default port number.  The other two required options tells SpamAssassin to use 
-the defined username and password to establish the connection.
+the defined username and password to establish the connection. Note that this
+will NOT look for test rules, only local scores, whitelist_from(s),
+required_hits, and auto_report_threshold.
 
 If the user_scores_dsn option does not exist, SpamAssassin will not attempt
-to use an SQL for retrieving users' preferences. Note that this will NOT look
-for test rules, only local scores, whitelist_from(s), required_hits, and
-auto_report_threshold.
+to use an SQL for retrieving users' preferences.
+
+If spamd can't connect using user_scores_dsn, or an error occurs when
+querying the SQL server during message filtering, spam checking will not be
+performed on that message.
 
 Requirements
 ------------
